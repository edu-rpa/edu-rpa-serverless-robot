AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  edu-rpa-serverless-robot

  Sample SAM Template for edu-rpa-serverless-robot

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    Tracing: Active
    Environment:
        Variables:
          ROBOT_BUCKET: edu-rpa-robot
          ROBOT_TABLE: robot
          MAIN_SERVER_API: https://edu-rpa-api.dev-quangkhanh.xyz
          SERVICE_KEY: e238e535-decb-4e18-9ef2-5094cf4b9a08
          MYSQL_HOST: edu-rpa-db-dev.cahnyqo389dg.ap-southeast-2.rds.amazonaws.com
          REPORT_AGENT_SQL: report_agent
          REPORT_AGENT_PWD: rA93{1L8=9D!
          REPORT_SCHEMA: report

Resources:
  RobotTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        -
          AttributeName: userId
          KeyType: HASH
        -
          AttributeName: processIdVersion
          KeyType: RANGE
      AttributeDefinitions:
        -
          AttributeName: userId
          AttributeType: S
        -
          AttributeName: processIdVersion
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: robot
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  RobotBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: edu-rpa-robot
    DeletionPolicy: Retain

  RobotHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - "*"
        AllowHeaders:
          - "*"
        AllowOrigins:
          - "*"

  RunRobotFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ConnectRobotTable:
        Properties:
          Destination:
            Id: RobotTable
          Permissions:
            - Read
            - Write
    Properties:
      PackageType: Zip
      CodeUri: src/robot/
      Handler: app.run_robot
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource: 'arn:aws:iam::678601387840:role/EC2_robot_role'
          - Effect: Allow
            Action: 
              - 'ec2:RunInstances'
              - 'ec2:StartInstances'
              - 'ec2:CreateTags'
            Resource: '*'
      Events:
        HttpPost:
          Type: HttpApi
          Properties:
            Path: /robot/run
            Method: POST
            ApiId: !Ref RobotHttpApi

  StopRobotFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ConnectRobotTable:
        Properties:
          Destination:
            Id: RobotTable
          Permissions:
            - Read
            - Write
    Properties:
      PackageType: Zip
      CodeUri: src/robot/
      Handler: app.stop_robot
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - 'ec2:StopInstances'
            Resource: '*'
      Events:
        HttpPost:
          Type: HttpApi
          Properties:
            Path: /robot/stop
            Method: POST
            ApiId: !Ref RobotHttpApi

  GetRobotDetailFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ConnectRobotTable:
        Properties:
          Destination:
            Id: RobotTable
          Permissions:
            - Read
    Properties:
      PackageType: Zip
      CodeUri: src/robot/
      Handler: app.get_robot_detail
      Runtime: python3.9
      Events:
        HttpGet:
          Type: HttpApi
          Properties:
            Path: /robot/detail
            Method: GET
            ApiId: !Ref RobotHttpApi

  UpdateRobotStateFunction:
    Type: AWS::Serverless::Function
    Connectors:
      ConnectRobotTable:
        Properties:
          Destination:
            Id: RobotTable
          Permissions:
            - Read
            - Write
    Properties:
      PackageType: Zip
      CodeUri: src/robot/
      Handler: app.update_robot_state
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 'ec2:DescribeInstances'
            Resource: '*'
      Events:
        EC2EBRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - EC2 Instance State-change Notification
            Target:
              Id: UpdateRobotStateFunction
            RuleName: EC2-robot-instance-updates-state

  CreateScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/schedule/
      Handler: app.create_schedule
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - 'scheduler:GetSchedule'
              - 'scheduler:CreateSchedule'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource: 'arn:aws:iam::678601387840:role/Robot_Scheduler_Role'
      Events:
        HttpPost:
          Type: HttpApi
          Properties:
            Path: /schedule
            Method: POST
            ApiId: !Ref RobotHttpApi

  DeleteScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/schedule/
      Handler: app.delete_schedule
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - 'scheduler:DeleteSchedule'
            Resource: '*'
      Events:
        HttpPost:
          Type: HttpApi
          Properties:
            Path: /schedule/delete
            Method: POST
            ApiId: !Ref RobotHttpApi

  GetScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/schedule/
      Handler: app.get_schedule
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - 'scheduler:GetSchedule'
            Resource: '*'
      Events:
        HttpGet:
          Type: HttpApi
          Properties:
            Path: /schedule
            Method: GET
            ApiId: !Ref RobotHttpApi

  UpdateScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/schedule/
      Handler: app.update_schedule
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - 'scheduler:GetSchedule'
              - 'scheduler:UpdateSchedule'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource: 'arn:aws:iam::678601387840:role/Robot_Scheduler_Role'
      Events:
        HttpPut:
          Type: HttpApi
          Properties:
            Path: /schedule
            Method: PUT
            ApiId: !Ref RobotHttpApi

  CheckNewEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/event/
      Handler: app.check_new_emails
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - 'secretsmanager:GetSecretValue'
            Resource: 'arn:aws:secretsmanager:ap-southeast-2:678601387840:secret:edu-rpa/dev/secrets-wpE1hy'
        - Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: 'arn:aws:lambda:ap-southeast-1:678601387840:function:edu-rpa-serverless-robot-RunRobotFunction-8sVtvmT4CL62'

  UpsertEventScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/event/
      Handler: app.upsert_event_schedule
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - 'scheduler:GetSchedule'
              - 'scheduler:CreateSchedule'
              - 'scheduler:UpdateSchedule'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource: 'arn:aws:iam::678601387840:role/Event_Scheduler_Role'
      Events:
        HttpPost:
          Type: HttpApi
          Properties:
            Path: /event
            Method: POST
            ApiId: !Ref RobotHttpApi

  CheckNewFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/event/
      Handler: app.check_new_files
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - 'secretsmanager:GetSecretValue'
            Resource: 'arn:aws:secretsmanager:ap-southeast-2:678601387840:secret:edu-rpa/dev/secrets-wpE1hy'
        - Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: 'arn:aws:lambda:ap-southeast-1:678601387840:function:edu-rpa-serverless-robot-RunRobotFunction-8sVtvmT4CL62'

  CheckNewResponsesFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/event/
      Handler: app.check_new_responses
      Runtime: python3.9
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - 'secretsmanager:GetSecretValue'
            Resource: 'arn:aws:secretsmanager:ap-southeast-2:678601387840:secret:edu-rpa/dev/secrets-wpE1hy'
        - Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: 'arn:aws:lambda:ap-southeast-1:678601387840:function:edu-rpa-serverless-robot-RunRobotFunction-8sVtvmT4CL62'

  TriggerWriteRobotStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      Handler: index.triggerWriteRobotStateHandler
      Runtime: nodejs18.x
      CodeUri: src/trigger
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt RobotTable.StreamArn
            StartingPosition: TRIM_HORIZON # Adjust as needed
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RobotTable
  
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  RobotHttpApi:
    Description: Serverless HTTP API (API Gateway endpoint URL)
    Value: !Sub "https://${RobotHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
